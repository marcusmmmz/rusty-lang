fn or(a, b) {
  if a { return true }
  if b { return true }
  return false
}

fn and(a, b) {
  if a { if b { return true } }
  return false
}

fn not(a) {
  if a { return false }
  return true
}

fn includes(arr, char) {
	let i = 0

	while i < arr.length {
		if arr.at(i) == char {
			return true
		}

		i = i + 1
	}

	return false
}

fn is_digit(char) {
	return includes(["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"], char)
}

fn is_operator(char) {
	return includes(["+", "-", "*", "/", "=", "==", "<", ">"], char)
}

fn is_char(char) {
	if and(char.charCodeAt(0) > 64, char.charCodeAt(0) < 91) {
		return true
	}
	if and(char.charCodeAt(0) > 96, char.charCodeAt(0) < 123) {
		return true
	}

	return false
}

let TOKEN_NONE = "NONE"
let TOKEN_NUMBER = "NUMBER"
let TOKEN_OPERATOR = "OPERATOR"
let TOKEN_STRING = "STRING"
let TOKEN_IDENTIFIER = "IDENTIFIER"
let TOKEN_OPEN_BRACKET = "OPEN_BRACKET"
let TOKEN_CLOSED_BRACKET = "CLOSED_BRACKET"
let TOKEN_OPEN_SQUARE_BRACKET = "OPEN_SQUARE_BRACKET"
let TOKEN_CLOSED_SQUARE_BRACKET = "CLOSED_SQUARE_BRACKET"
let TOKEN_OPEN_PAREN = "OPEN_PAREN"
let TOKEN_COMMA = "COMMA"
let TOKEN_CLOSED_PAREN = "CLOSED_PAREN"
let TOKEN_DOT = "DOT"

fn tokenize_string(i, chars) {
	let string = ""

	let next_character_is_special = false

	while i < chars.length {
		let char = chars.at(i)

		if next_character_is_special {
			i = i + 1
			string = string + char
			next_character_is_special = false
		} else if char == "\"" {
			return [i, [TOKEN_STRING, string]]
		} else {
			i = i + 1
			if char == "\\" {
				next_character_is_special = true
			} else {
				string = string + char
			}
		}
	}

	print("Unfinished string")
}

fn tokenize_identifier(i, chars) {
	let identifier = ""

	while i < chars.length {
		let char = chars.at(i)

		if or(or(is_char(char), char == "_"), is_digit(char)) {
			identifier = identifier + char
			i = i + 1
		} else {
			i = i - 1
			return [i, [TOKEN_IDENTIFIER, identifier]]
		}
	}

	return [i, [TOKEN_IDENTIFIER, identifier]]
}

fn tokenize_number(i, chars) {
	let number = ""

	while i < chars.length {
		let char = chars.at(i)

		if is_digit(char) {
			number = number + char
			i = i + 1
		} else {
			i = i - 1
			return [i, [TOKEN_NUMBER, number]]
		}
	}

	return [i, [TOKEN_NUMBER, number]]
}

fn tokenize_operator(i, chars) {
	let operator = ""

	while i < chars.length {
		let char = chars.at(i)

		if is_operator(char) {
			operator = operator + char
			i = i + 1
		} else {
			i = i - 1
			return [i, [TOKEN_OPERATOR, operator]]
		}
	}
	return [i, [TOKEN_OPERATOR, operator]]
}

fn tokenize(text) {
	let tokens = []

	let i = 0
	while i < text.length {
		let char = text.at(i)

		fn tokenize_and_skip(tokenize_func) {
			let ret = tokenize_func(i, text)
			i = ret.at(0)
			tokens.push(ret.at(1))
		}

		if char.charCodeAt(0) == 34 {
			i = i + 1
			tokenize_and_skip(tokenize_string)
		} else if is_digit(char) {
			tokenize_and_skip(tokenize_number)
		} else if is_char(char) {
			tokenize_and_skip(tokenize_identifier)
		} else if is_operator(char) {
			tokenize_and_skip(tokenize_operator)
		} else if char == "{" {
			tokens.push([TOKEN_OPEN_BRACKET, []])
		} else if char == "}" {
			tokens.push([TOKEN_CLOSED_BRACKET, []])
		} else if char == "[" {
			tokens.push([TOKEN_OPEN_SQUARE_BRACKET, []])
		} else if char == "]" {
			tokens.push([TOKEN_CLOSED_SQUARE_BRACKET, []])
		} else if char == "(" {
			tokens.push([TOKEN_OPEN_PAREN, []])
		} else if char == ")" {
			tokens.push([TOKEN_CLOSED_PAREN, []])
		} else if char == "." {
			tokens.push([TOKEN_DOT, []])
		} else if char == "," {
			tokens.push([TOKEN_COMMA, []])
		}

		i = i + 1
	}

	return tokens
}

fn get_token_type(token) {
	return token.at(0)
}

fn get_token_value(token) {
	return token.at(1)
}

let NODE_NUMBER = "NUMBER"
let NODE_OPERATION = "OPERATION"
let NODE_IDENTIFIER = "IDENTIFIER"
let NODE_BRACKETS = "BRACKETS"
let NODE_STRING = "STRING"
let NODE_LET_STATEMENT = "LET_STATEMENT"
let NODE_IF_STATEMENT = "IF_STATEMENT"
let NODE_WHILE_STATEMENT = "WHILE_STATEMENT"
let NODE_RETURN_STATEMENT = "RETURN_STATEMENT"
let NODE_FUNCTION_CALL = "FUNCTION_CALL"
let NODE_FUNCTION_DECLARATION = "FUNCTION_DECLARATION"
let NODE_MEMBER = "MEMBER"
let NODE_ARRAY_CREATION = "ARRAY_CREATION"

fn get_node_type(node) {
	return node.at(0)
}

fn get_node_value(node) {
	return node.at(1)
}

fn get_operator_precedence(operator) {
	if or(or(operator == "=", operator == "=="), or(operator == ">", operator == "<")) {
		return 0
	}

	if or(operator == "+", operator == "-") {
		return 1
	}

	if or(operator == "*", operator == "/") {
		return 2
	}
}

fn parse_parenthesis(i, tokens) {
	let children = []

	if get_token_type(tokens.at(i)) == TOKEN_OPEN_PAREN {
		i = i + 1
	}

	while i < tokens.length {
		let token = tokens.at(i)

		if get_token_type(token) == TOKEN_CLOSED_PAREN {
			i = i + 1
			return [i, children]
		} else {
			if get_token_type(token) == TOKEN_COMMA {
				i = i + 1
			} else {
				let ret = parse_expression(i, tokens)
				i = ret.at(0)
				expression = ret.at(1)

				children.push( expression )
			}
		}
	}

	print("Unfinished parenthesis")
}

fn parse_function_call(identifier, i, tokens) {
	let ret = parse_parenthesis(i, tokens)
	i = ret.at(0)
	let args = ret.at(1)

	return [i, [NODE_FUNCTION_CALL, [identifier, args]]]
}

fn parse_member(object, i, tokens) {
	if not(get_node_type(tokens.at(i)) == TOKEN_DOT) {
		print("PANIC")
	}

	i = i + 1

	let vec = [object]

	while i < tokens.length {
		let ret = try_parse_expression_unit(i, tokens)
		i = ret.at(0)
		let expr_unit = ret.at(1)

		if not(ret) {
			print("PANIC")
		}

		vec.push(expr_unit)

		if get_node_type(tokens.at(i)) == TOKEN_DOT {
			i = i + 1
		} else {
			return [i, [NODE_MEMBER, vec]]
		}
	}
}

fn try_parse_expression_unit_different_idk(i, tokens) {
	let token = tokens.at(i)

	let token_type = get_token_type(token)

	if token_type == TOKEN_NUMBER {
		return [i + 1, [NODE_NUMBER, get_token_value(token)]]
	} else if token_type == TOKEN_STRING {
		return [i + 1, [NODE_STRING, get_token_value(token)]]
	} else if token_type == TOKEN_IDENTIFIER {
		let identifier = get_token_value(token)

		i = i + 1

		if get_token_type( tokens.at(i) ) == TOKEN_OPEN_PAREN {
			let ret = parse_function_call(identifier, i, tokens)
			i = ret.at(0)
			let node = ret.at(1)

			return [i, node]
		}

		return [i, [NODE_IDENTIFIER, identifier]]
	} else if token_type == TOKEN_OPEN_SQUARE_BRACKET {
		i = i + 1

		let ret = parse_square_brackets(i, tokens)
		i = ret.at(0)
		let node = ret.at(1)

		return [i, node]
	}

	return false
}

fn try_parse_expression_unit(i, tokens) {
	let ret = try_parse_expression_unit_different_idk(i, tokens)

	if ret == false {
		return false
	}

	i = ret.at(0)
	let res = ret.at(1)

	if get_token_type(tokens.at(i)) == TOKEN_DOT {
		let ret = parse_member(res, i, tokens)
		i = ret.at(0)
		let node = ret.at(1)

		return [i, node]
	}

	return ret
}

fn split_exclude_middle(arr, middle) {
	let left = []
	let left_i = 0
	while left_i < middle {
		left.push(arr.at(left_i))
        left_i = left_i + 1
	}

	let right = []
	let right_i = middle + 1
	while right_i < arr.length {
		right.push(arr.at(right_i))
        right_i = right_i + 1
	}

    return [left, right]
}

fn parse_known_size_expression(nodes) {
	if nodes.length == 1 {
		return nodes.at(0)
	}

	let lowest_precedence = 9999
	let lowest_precedence_index = 0
	let lowest_precedence_operation = " "

	let i = 0
	while i < nodes.length {
		let node = nodes.at(i)

		if get_node_type(node) == NODE_OPERATION {
			let operation = get_node_value(node).at(1)

			let op_precedence = get_operator_precedence(operation)

			if op_precedence < lowest_precedence {
				lowest_precedence = op_precedence
				lowest_precedence_index = i
				lowest_precedence_operation = operation
			}
		}

		i = i + 1
	}

	let left_and_right = split_exclude_middle(nodes, lowest_precedence_index)

	let left = left_and_right.at(0)
	let operator = nodes.at(lowest_precedence_index)
	let right = left_and_right.at(1)

	return [
		NODE_OPERATION,
		[
			parse_known_size_expression(left),
			lowest_precedence_operation,
			parse_known_size_expression(right)
		]
	]
}

fn parse_expression(i, tokens) {
	let nodes = []
	let last_token_was_expr = false

	while i < tokens.length {
		let token = tokens.at(i)

		if last_token_was_expr {
			if get_token_type(token) == TOKEN_OPERATOR {
				let operator = get_node_value(token)
				nodes.push([NODE_OPERATION, ["0", operator, "0"]])
				
				last_token_was_expr = false
				i = i + 1
			} else {
				return [i, parse_known_size_expression(nodes)]
			}
		} else {
			let ret = try_parse_expression_unit(i, tokens)

			if not(ret) {
				return [i, parse_known_size_expression(nodes)]
			}

			i = ret.at(0)
			nodes.push( ret.at(1) )

			last_token_was_expr = true
		}
	}

	return [i, parse_known_size_expression(nodes)]
}

fn parse_let_statement(i, tokens) {
	if get_node_type(tokens.at(i)) == TOKEN_IDENTIFIER {
		let identifier = tokens.at(i)
		i = i + 1

		if get_node_type(tokens.at(i)) == TOKEN_OPERATOR {
			if not(get_node_value(tokens.at(i)) == "=") {
				return print("PANIC")
			}
			i = i + 1

			let ret = parse_expression(i, tokens)
			i = ret.at(0)

			let expression = ret.at(1)

			return [i, [NODE_LET_STATEMENT, [identifier, expression]]]
		} else {
			print("PANIC")
		}
	} else {
		print("PANIC")
	}
}

fn parse_if_statement(i, tokens) {
	let ret_1 = parse_expression(i, tokens)
	i = ret_1.at(0)
	let conditional = ret_1.at(1)

	let ret_2 = parse_brackets(i, tokens)
	i = ret_2.at(0)
	let brackets = ret_2.at(1)

	if get_token_type(tokens.at(i)) == TOKEN_IDENTIFIER {
		if get_token_value(tokens.at(i)) == "else" {
			i = i + 1

			if get_token_type(tokens.at(i)) == TOKEN_IDENTIFIER {
				if get_token_value(tokens.at(i)) == "if" {
					i = i + 1

					let ret = parse_if_statement(i, tokens)
					i = ret.at(0)
					value = ret.at(1)

					return [i, [NODE_IF_STATEMENT, [conditional, brackets, value]]]
				} else {
					let ret = parse_brackets(i, tokens)
					i = ret.at(0)
					value = ret.at(1)

					return [i, [NODE_IF_STATEMENT, [conditional, brackets, value]]]
				}
			} else {
				let ret = parse_brackets(i, tokens)
				i = ret.at(0)
				value = ret.at(1)

				return [i, [NODE_IF_STATEMENT, [conditional, brackets, value]]]
			}
		}
	}

	return [i, [NODE_IF_STATEMENT, [conditional, brackets]]]
}

fn parse_while_statement(i, tokens) {
	let ret_1 = parse_expression(i, tokens)
	i = ret_1.at(0)
	let conditional = ret_1.at(1)

	let ret_2 = parse_brackets(i, tokens)
	i = ret_2.at(0)
	let brackets = ret_2.at(1)

	return [i, [NODE_WHILE_STATEMENT, [conditional, brackets]]]
}

fn parse_return_statement(i, tokens) {
	let ret = parse_expression(i, tokens)
	i = ret.at(0)
	let expression = ret.at(1)

	return [i, [NODE_RETURN_STATEMENT, expression]]
}

fn parse_square_brackets(i, tokens) {
	let nodes = []

	if get_token_type(tokens.at(i)) == TOKEN_CLOSED_SQUARE_BRACKET {
		i = i + 1
		return [i, [NODE_ARRAY_CREATION, nodes]]
	}

	while i < tokens.length {
		let ret = parse_expression(i, tokens)
		i = ret.at(0)
		let expression = ret.at(1)

		nodes.push(expression)

		if get_token_type(tokens.at(i)) == TOKEN_CLOSED_SQUARE_BRACKET {
			i = i + 1
			return [i, [NODE_ARRAY_CREATION, nodes]]
		}

		if get_token_type(tokens.at(i)) == TOKEN_COMMA {
			i = i + 1
		} else {
			i = i + 1
			print("PANIC")
		}
	}
}

fn parse_function_declaration(i, tokens) {
	if get_token_type(tokens.at(i)) == TOKEN_IDENTIFIER {
		let func_name = get_token_value(tokens.at(i))

		i = i + 1

		let ret_1 = parse_parenthesis(i, tokens)
		i = ret_1.at(0)
		let args = ret_1.at(1)

		let ret_2 = parse_brackets(i, tokens)
		i = ret_2.at(0)
		let code = ret_2.at(1)

		return [i, [NODE_FUNCTION_DECLARATION, [func_name, args, code]]]
	}
}

fn parse_brackets(i, tokens) {
	if not(get_token_type(tokens.at(i)) == TOKEN_OPEN_BRACKET) {
		return print("PANIC")
	}
	i = i + 1

	let children = []

	while i < tokens.length {
		let token = tokens.at(i)

		fn parse_and_skip(parse_func) {
			let ret = parse_func(i, tokens)
			i = ret.at(0)
			let tree_node = ret.at(1)

			children.push(tree_node)
		}

		let token_type = get_token_type(token)
		let token_value = get_token_value(token)

		if token_type == TOKEN_IDENTIFIER {
			if token_value == "let" {
				i = i + 1
				parse_and_skip(parse_let_statement)
			} else if token_value == "if" {
				i = i + 1
				parse_and_skip(parse_if_statement)
			} else if token_value == "while" {
				i = i + 1
				parse_and_skip(parse_while_statement)
			} else if token_value == "return" {
				i = i + 1
				parse_and_skip(parse_return_statement)
			} else if token_value == "fn" {
				i = i + 1
				parse_and_skip(parse_function_declaration)
			} else {
				parse_and_skip(parse_expression)
			}
		} else if or(token_type == TOKEN_STRING, token_type == TOKEN_NUMBER) {
			parse_and_skip(parse_expression)
		} else {
			i = i + 1
			let token = tokens.at(i)

			if token_type == TOKEN_CLOSED_BRACKET {
				return [i, [NODE_BRACKETS, children]]
			}
		}
	}

	print("Unmatched brackets")
}

fn parse(tokens) {
	let new_tokens = [[TOKEN_OPEN_BRACKET, []]]
	
	let i = 0
	while i < tokens.length {
		let token = tokens.at(i)
		new_tokens.push(token)
		i = i + 1
	}

	new_tokens.push([TOKEN_CLOSED_BRACKET, []])

	let parsed = parse_brackets(0, new_tokens)

	return parsed.at(1)
}

fn ast_to_js(node) {
	if get_node_type(node) == NODE_OPERATION {
		let ret = get_node_value(node)
		let left = ret.at(0)
		let operator = ret.at(1)
		let right = ret.at(2)

		if operator == "==" {
			operator = "==="
		}

		return ast_to_js(left) + " " + operator + " " + ast_to_js(right)
	} else if get_node_type(node) == NODE_NUMBER {
		let number = get_node_value(node)

		return number
	} else if get_node_type(node) == NODE_IDENTIFIER {
		let value = get_node_value(node)

		return value
	} else if get_node_type(node) == NODE_STRING {
		return "`" + get_node_value(node).replaceAll("\\", "\\\\").replaceAll("`", "\\`") + "`"
	} else if get_node_type(node) == NODE_LET_STATEMENT {
		let value = get_node_value(node)
		let identifier = get_node_value(value.at(0))
		let expression = ast_to_js( value.at(1) )

		return "let " + identifier + " = " + expression
	} else if get_node_type(node) == NODE_IF_STATEMENT {
		let value = get_node_value(node)
		let conditional = ast_to_js( value.at(0) )
		let brackets = ast_to_js( value.at(1) )

		let output = "if ("
		output = output + conditional
		output = output + ") "
		output = output + brackets

		let else_cond = value.at(2)

		if else_cond {
			output = output + " else "
			output = output + ast_to_js(else_cond)
		}

		return output
	} else if get_node_type(node) == NODE_WHILE_STATEMENT {
		let value = get_node_value(node)
		let conditional = ast_to_js( value.at(0) )
		let brackets = ast_to_js( value.at(1) )

		return "while (" + conditional + ") " + brackets
	} else if get_node_type(node) == NODE_RETURN_STATEMENT {
		let expression = ast_to_js( get_node_value(node) )

		return "return " + expression
	} else if get_node_type(node) == NODE_FUNCTION_CALL {
		let value = get_node_value(node)

		let identifier = value.at(0)

		if identifier == "print" {
			identifier = "console.log"
		}

		let args = value.at(1)

		let args_str = ""

		let i = 0
		while i < args.length {
			let arg = args.at(i)

			args_str = args_str + ast_to_js( arg )

			if not(i == args.length - 1) {
				args_str = args_str + ", "
			}

			i = i + 1
		}

		return identifier + "(" + args_str + ")"
	} else if get_node_type(node) == NODE_FUNCTION_DECLARATION {
		let value = get_node_value(node)

		let func_name = value.at(0)

		let args = value.at(1)

		let args_str = ""

		let i = 0
		while i < args.length {
			let arg = args.at(i)

			args_str = args_str + ast_to_js( arg )

			if not(i == args.length - 1) {
				args_str = args_str + ", "
			}

			i = i + 1
		}

		let brackets = ast_to_js( value.at(2) )

		return "function " + func_name + "(" + args_str + ") " + brackets
	} else if get_node_type(node) == NODE_ARRAY_CREATION {
		let args = get_node_value(node)

		let args_str = ""

		let i = 0
		while i < args.length {
			let arg = args.at(i)

			args_str = args_str + ast_to_js( arg )

			if not(i == args.length - 1) {
				args_str = args_str + ", "
			}

			i = i + 1
		}

		return "[" + args_str + "]"
	} else if get_node_type(node) == NODE_MEMBER {
		let members = get_node_value(node)

		let members_str = ""

		let i = 0
		while i < members.length {
			let member = members.at(i)

			members_str = members_str + ast_to_js( member )

			if not(i == members.length - 1) {
				members_str = members_str + "."
			}

			i = i + 1
		}

		return members_str
	} else if get_node_type(node) == NODE_BRACKETS {
		let children = get_node_value(node)
		let output = "{\
"

		let i = 0
		while i < children.length {
			let child = children.at(i)

			output = output + ast_to_js(child)

			if not(i == children.length - 1) {
				output = output + ";\
"
			}

			i = i + 1
		}

		return output + "\
}"
	}
}

fn code_string_to_js(text) {
	let js = ast_to_js( parse( tokenize(text) ) )

	let output = ""
	let i = 1
	while i < js.length - 1 {
		output = output + js.at(i)
		i = i + 1
	}

	return output
}
